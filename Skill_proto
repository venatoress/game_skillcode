1. 무장해제

using UnityEngine;

// 적의 무기를 탈취하여 유카가 사용하는 무장해제 스킬
public class WeaponDisarm : MonoBehaviour
{
    public GameObject player; // 유카 캐릭터
    public GameObject disarmedWeaponPrefab; // 적에게서 빼앗은 무기의 프리팹
    public Transform weaponHoldPoint; // 유카가 무기를 들고 있는 위치

    public Animator animator; // 애니메이션 트리거용
    public AudioSource audioSource; // 효과음 재생용
    public AudioClip disarmSFX; // 무장해제 효과음
    public AudioClip finishSFX; // 피니시 효과음

    // 적의 무기를 탈취하고 해당 무기 유형에 따라 피니시 연출 실행
    public void DisarmEnemy(GameObject enemy, WeaponType weaponType)
    {
        // 실용적이지 않은 무기는 탈취하지 않음 (예: 마법 무기)
        if (!IsWeaponUseful(weaponType)) return;

        // 무장해제된 무기 생성 및 유카 손에 부착
        GameObject stolenWeapon = Instantiate(disarmedWeaponPrefab, weaponHoldPoint.position, Quaternion.identity);
        stolenWeapon.transform.SetParent(weaponHoldPoint);

        // 무기 종류에 따라 피니시 처리 분기
        if (weaponType == WeaponType.Dagger)
        {
            TriggerDaggerFinish(enemy); // 단검인 경우 즉사 연출
        }
        else
        {
            TriggerStandardFinish(enemy); // 일반 무기는 일반 피니시 처리
        }
    }

    // 실용적인 무기 판단 – 마법 무기는 사용하지 않음
    bool IsWeaponUseful(WeaponType weaponType)
    {
        return weaponType != WeaponType.Magic;
    }

    // 단검 탈취 시 즉사기 연출과 적 제거
    void TriggerDaggerFinish(GameObject enemy)
    {
        animator.SetTrigger("DaggerFinish"); // 즉사기 애니메이션 실행
        audioSource.PlayOneShot(finishSFX); // 사운드 재생
        Destroy(enemy); // 적 즉사 처리
        ClearWeaponHand(); // 손에 들린 무기 정리
    }

    // 일반 무기 탈취 후 처리 – 적 제거 및 사운드
    void TriggerStandardFinish(GameObject enemy)
    {
        animator.SetTrigger("HeavyFinish"); // 일반 피니시 애니메이션
        audioSource.PlayOneShot(disarmSFX); // 효과음 재생
        Destroy(enemy); // 적 제거
        // 장병기 등은 유카가 계속 사용할 수 있음 (별도 로직 필요)
    }

    // 손에 들고 있는 무기를 정리 (즉사 시 사용)
    void ClearWeaponHand()
    {
        foreach (Transform child in weaponHoldPoint)
        {
            Destroy(child.gameObject);
        }
    }
}

// 무기 종류를 구분하는 열거형
public enum WeaponType
{
    Dagger,   // 즉사기로 처리
    Sword,
    Spear,
    Halberd,
    Magic     // 탈취 불가
}

2. 마법 해제

public void FingerSnapDispel(GameObject targetSpell)
{
    if (targetSpell.TryGetComponent<MagicStructure>(out var structure))
    {
        structure.Disrupt(); // 마법 구조 붕괴
        PlayEffect(snapEffect, transform.position);
        PlaySound(snapSound);
        animator.SetTrigger("Snap");
    }
}

public void BladeDispel(GameObject spell)
{
    if (spell.TryGetComponent<MagicStructure>(out var structure))
    {
        structure.Sever(); // 마법 구조체 절단
        PlayEffect(slashEffect, spell.transform.position);
        PlaySound(slashSound);
        animator.SetTrigger("Slash");
    }
}

public void FistDispel(GameObject spell)
{
    if (spell.TryGetComponent<MagicStructure>(out var structure))
    {
        structure.Crush(); // 마법 구조 파괴
        PlayEffect(punchEffect, spell.transform.position);
        PlaySound(punchSound);
        animator.SetTrigger("Punch");
    }
}

public void MultiCasterDispel(List<GameObject> activeSpells)
{
    foreach (var spell in activeSpells)
    {
        if (spell.TryGetComponent<MagicStructure>(out var structure))
        {
            structure.ForceInterrupt(); // 강제 해제
        }
    }

    PlayEffect(shockwaveEffect, transform.position);
    PlaySound(quakeSound);
    animator.SetTrigger("GroundSmash");

    // 대지 흔들림 연출
    StartCoroutine(CameraShake(0.6f, 0.3f));
}
//아카데미 파트에서 처음이자 마지막으로 쓸 디스펠(중요)
public void StealMagic(GameObject spell)
{
    if (spell.TryGetComponent<MagicSigil>(out var sigil))
    {
        MagicFragment fragment = sigil.ExtractFragment(); // 시전 중 일부 마법진 낚아채기
        if (fragment != null)
        {
            EnchantToSword(fragment);
            PlayEffect(stealEffect, transform.position);
            PlaySound(stealSound);
            animator.SetTrigger("GrabAndEnchant");
        }
    }
}

private void EnchantToSword(MagicFragment fragment)
{
    sword.ApplyTemporaryEnchant(fragment); // 불안정 마법 부여
    sword.SetTimer(10f); // 10초 후 폭주/폭발 연출 가능
}

private void PlayEffect(ParticleSystem effect, Vector3 position)
{
    ParticleSystem fx = Instantiate(effect, position, Quaternion.identity);
    fx.Play();
}

// 연출용 보조 함수
private void PlaySound(AudioClip clip)
{
    AudioSource.PlayClipAtPoint(clip, transform.position);
}

